<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Namespaces</title>
</head>
<body>
    <h1>Пространства имён</h1>
    <p>В широком смысле - это один из способов инкапсуляции элементов. Такое абстрактное понятие можно увидеть во многих местах.<br>
    Например, в любой операционной системе директории служат для группировки связанных файлов и выступают в качестве пространства имен для находящихся в них файлов. <br>
    В качестве конкретного примера файл foo.txt может находиться сразу в обеих директориях: /home/greg и /home/other, но две копии foo.txt не могут существовать в одной директории. <br>
    Кроме того, для доступа к foo.txt извне директории /home/greg, мы должны добавить имя директории перед именем файла используя разделитель, чтобы получить /home/greg/foo.txt. Этот же принцип распространяется и на пространства имен в программировании. 
    </p>
    <p>
    В PHP пространства имен используются для решения двух проблем, с которыми сталкиваются авторы библиотек <br>
    и приложений при создании повторно используемых элементов кода, таких как классы и функции: 
        <ol>
            <li>Конфликт имен между вашим кодом и внутренними классами/функциями/константами PHP или сторонними. </li>
            <li>Возможность создавать псевдонимы (или сокращения) для Ну_Очень_Длинных_Имен, чтобы облегчить первую проблему и улучшить читаемость исходного кода. </li>
        </ol>
    </p>
    <hr>
    <b>Пространства имен PHP предоставляют возможность группировать логически связанные классы, интерфейсы, функции и константы. <br>
    Пространства имен объявляются с помощью зарезервированного слова namespace. Файл, содержащий пространство имен, должен содержать его объявление в начале перед любым другим кодом, кроме зарезервированного слова declare. </b>
    <hr>
    <h2> Подключение файлов</h2>
    <p>Директива include, include_once, require, require_once, </p>
    <p>Инструкция <b>include</b> подключает в программу внешний файл с кодом php. </p>
    <p>Инструкция <b>include_once</b><br>
        Использование инструкции include имеет недостатки. Так, мы можем в разных местах кода неумышленно подключить один и тот же файл, что при выполнении кода вызовет ошибки.<br>
        Чтобы исключить повторное подключение файла, вместо инструкции include надо применять инструкцию include_once</p><hr>
    <p>Инструкции require и require_once
        <b>Действие инструкции require подобно инструкции include: она также подключает внешний файл, вставляя в программу его содержимое. Только теперь, если данный файл не будет найден, действие программы прекратится</b><br>
        И также если у нас в коде встретятся несколько инструкций require, которые подключают один и тот же файл, то интерпретатор выдаст ошибку. И также чтобы избежать данной ситуации, надо использовать инструкцию require_once:</p>




    <?php
        include "app.php";
        include_once "app.php";
        require_once "app.php";
        // require "app.php"; - fatal error

        $alex = new Umbrella\T\Name();
    ?>

</body>
</html>