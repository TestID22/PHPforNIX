<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Файловая система</title>
</head>
<body>
    <h1>Файловая система</h1>
    <p>Как и большинство языков программирования, PHP поддерживает работу с файлами, которые являются одним из способов хранения информации.</p>
    Для открытия файлов в PHP определена функция fopen(). Она имеет следующее определение: resource fopen(string $filename, string $mode). <br>
    >Первый параметр $filename представляет путь к файлу, а второй - режим открытия. В зависимости от цели открытия и типа файла данный параметр может принимать следующие значения:
    <ol>
        <li>'r': файл открывается только для чтения. Если файла не существует, возвращает false<br></li>
        <li>'r+': файл открывается только для чтения с возможностью записи. Если файла не существует, возвращает false<br></li>
        <li>'w': файл открывается для записи. Если такой файл уже существует, то он перезаписывается, если нет - то он создается<br></li>
        <li>'w+': файл открывается для записи с возможностью чтения. Если такой файл уже существует, то он перезаписывается, если нет - то он создается<br></li>
        <li>'a': файл открывается для записи. Если такой файл уже существует, то данные записываются в конец файла, а старые данные остаются. Если файл не существует, то он создается<br></li>
        <li>'a+': файл открывается для чтения и записи. Если файл уже существует, то данные дозаписываются в конец файла. Если файла нет, то он создается<br>
        </li>
    </ol>
    <P>Файловый дескриптор — это неотрицательное целое число. Когда создается новый поток ввода-вывода, ядро возвращает процессу, создавшему поток ввода-вывода, его файловый дескриптор.
    По умолчанию Unix-оболочки связывают файловый дескриптор 0 с потоком стандартного ввода процесса (терминал), файловый дескриптор 1 — с потоком стандартного вывода (терминал), и файловый дескриптор 2 — с потоком диагностики (куда обычно выводятся сообщения об ошибках). Это соглашение соблюдается многими Unix-оболочками и многими приложениями — и ни в коем случае не является составной частью ядра. </P>
    <br>
    fclose - закрывает дескриптор.<br>
    <hr>
    htmlentities — Преобразует все возможные символы в соответствующие HTML-сущности <br>
    <ol>
        <li>fgets() - При каждом вызове fgets() PHP будет помещать указатель в конец считанной строки. </li>
        <li>feof() - Чтобы проследить окончание файла, используется функция feof(), которая возвращает true при завершении файла. И пока не будет достигнут конец файла, мы можем применять функцию fgets().</li>
        <li>Чтение файла полностью -> Если нам надо прочитать файл полностью, то мы можем облегчить себе жизнь, применив функцию file_get_contents()</li>
        <li>file() - Открывает файл или URL</li>
        <li></li>
    
    </ol>
    <hr>
    <?php 
    
    $fd = fopen("app.php", "a+"); //файловый дескриптор
    $file = file_get_contents("app.php");
    echo "<hr><br>";
    echo $file . "<br>";
    while(!feof($fd)){
        $string_html = htmlentities(fgets($fd));
        echo $string_html . "<br>";
    }
    echo "<hr><b>Запись в файл</b>";
    $script = "<script>alert('atack')</script>";
    fwrite($fd, $script);


    fclose($fd);
    ?>
</body>
</html>